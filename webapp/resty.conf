server {
	listen 80;
	add_header Cache-Control no-cache;
	location / {
	    default_type text/html;
	    content_by_lua_block {
	    	local data = require("shared").DATA
	    	local state = require("shared").STATE
		state.totalrequests=state.totalrequests+1
		if state.enabled then
			if (os.time()-state.lastaccess)>2 then
				state.overloaded=true
			else
				state.overloaded=false
			end
			if state.overloaded then
				state.lastaccess=os.time()

				if not data[ngx.var.remote_addr] then
					data[ngx.var.remote_addr] = {}
				end
				data[ngx.var.remote_addr][ngx.var.request_uri]=os.time()
				for host, locations in pairs(data) do
					for location,date in pairs(locations) do
						ngx.say("<p>Host: "..host.." Time: "..os.date('%Y-%m-%d %H:%M:%S', date).." Location: "..location.."</p>")
					end
				end
			else
				ngx.say("app is overloaded")
				return ngx.exit(503)
			end
		else
			ngx.say("app disabled")
			return ngx.exit(503)
		end
	    }
	}
	location = /status {
	    default_type text/html;
	    content_by_lua_block {
	    	local data = require("shared").DATA
	    	local state = require("shared").STATE
		if state.enabled then
			ngx.say("<p>enabled</p>")
		else
			ngx.say("<p>disabled</p>")
		end
	    }
	}
	location = /health {
	    default_type text/html;
	    content_by_lua_block {
	    	local data = require("shared").DATA
	    	local state = require("shared").STATE
		if state.overloaded then
			ngx.say("<p>overloaded</p>")
		else
			ngx.say("<p>ok</p>")
		end
	    }
	}
	location = /metrics {
	    default_type text/html;
	    content_by_lua_block {
	    	local data = require("shared").DATA
	    	local state = require("shared").STATE
			ngx.say("total_requests "..state.totalrequests.." ")
			if state.enabled then
				ngx.say("app_enabled 1")
			else
				ngx.say("app_enabled 0")
			end
			if state.overloaded then
				ngx.say("app_overloaded 1")
			else
				ngx.say("app_overloaded 0")
			end
			for host, locations in pairs(data) do
				local count = 0
				for _ in pairs(locations) do count=count+1 end
				ngx.say("visited_locations{host=\""..host.."\"}".." "..count.." ")
			end
	    }
	}
	location = /enable {
	    default_type text/html;
	    content_by_lua_block {
	    	local data = require("shared").DATA
	    	local state = require("shared").STATE
		state.enabled = true
		ngx.say("<p>app enabled</p>")
	    }
	}
	location = /disable {
	    default_type text/html;
	    content_by_lua_block {
	    	local data = require("shared").DATA
	    	local state = require("shared").STATE
		state.enabled = false
		ngx.say("<p>app disabled</p>")
	    }
	}
}
